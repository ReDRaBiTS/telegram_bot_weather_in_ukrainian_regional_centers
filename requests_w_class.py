import requests
import datetime
from variables import API_KEY_WT


class Weather:

    def __init__(self, city):
        self.city = city

    weather_dict = {
        'Thunderstorm': '‚õà –ì—Ä–æ–∑–∞ ‚õà',
        'Drizzle': 'üå¶ –ú—Ä—è–∫–∞ üå¶',
        'Rain': 'üåß –î–æ—â üåß',
                'Snow': 'üå® –°–Ω—ñ–≥ üå®',
                'Mist': 'üå´ –¢—É–º–∞–Ωüå´ ',
                'Smoke': '–î–∏–º',
                'Haze': 'üí® –õ–µ–≥–∫–∏–π —Ç—É–º–∞–Ω üí®',
                'Dust': '–ü–∏–ª',
                'Fog': 'üå´ –°–∏–ª—å–Ω–∏–π —Ç—É–º–∞–Ω üå´',
                'Sand': '–ü—ñ—Å–æ–∫',
                'Ash': '–ü–æ–ø—ñ–ª',
                'Squall': 'üå¨ –°–∏–ª—å–Ω–∏–π –≤—ñ—Ç–µ—Ä üå¨',
                'Tornado': 'üå™ –¢–æ—Ä–Ω–∞–¥–æ üå™',
                'Clear': '‚òÄÔ∏è –Ø—Å–Ω–µ –Ω–µ–±–æ ‚òÄÔ∏è',
                'Clouds': '‚õÖÔ∏è –•–º–∞—Ä–Ω–æ ‚õÖÔ∏è'
    }

    wind_directions = {
        '–ü—ñ–≤–Ω—ñ—á–Ω–∏–π': (348.75, 11.25),
        '–ü—ñ–≤–Ω—ñ—á–Ω–æ-—Å—Ö—ñ–¥–Ω–∏–π': (11.25, 78.75),
        '–°—Ö—ñ–¥–Ω–∏–π': (78.75, 101.25),
        '–ü—ñ–≤–¥–µ–Ω–Ω–æ-—Å—Ö—ñ–¥–Ω–∏–π': (101.25, 168.75),
        '–ü—ñ–≤–¥–µ–Ω–Ω–∏–π': (168.75, 191.25),
        '–ü—ñ–≤–¥–µ–Ω–Ω–æ-–∑–∞—Ö—ñ–¥–Ω–∏–π': (191.25, 258.75),
        '–ó–∞—Ö—ñ–¥–Ω–∏–π': (258.75, 281.25),
        '–ü—ñ–≤–Ω—ñ—á–Ω–æ-–∑–∞—Ö—ñ–¥–Ω–∏–π': (281.25, 348.75),
    }

    cities_dict = {
        "–ö–∏—ó–≤": "Kyiv",
        "–•–∞—Ä–∫—ñ–≤": "Kharkiv",
        "–û–¥–µ—Å–∞": "Odessa",
        "–î–Ω—ñ–ø—Ä–æ": "Dnipro",
        "–î–æ–Ω–µ—Ü—å–∫": "Donetsk",
        "–ó–∞–ø–æ—Ä—ñ–∂–∂—è": "Zaporizhzhia",
        "–õ—å–≤—ñ–≤": "Lviv",
        "–ö—Ä–∏–≤–∏–π –†—ñ–≥": "Kryvyi Rih",
        "–ú–∏–∫–æ–ª–∞—ó–≤": "Mykolaiv",
        "–ú–∞—Ä—ñ—É–ø–æ–ª—å": "Mariupol",
        "–í—ñ–Ω–Ω–∏—Ü—è": "Vinnytsia",
        "–•–µ—Ä—Å–æ–Ω": "Kherson",
        "–ü–æ–ª—Ç–∞–≤–∞": "Poltava",
        "–ß–µ—Ä–Ω—ñ–≥—ñ–≤": "Chernihiv",
        "–ß–µ—Ä–∫–∞—Å–∏": "Cherkasy",
        "–ñ–∏—Ç–æ–º–∏—Ä": "Zhytomyr",
        "–°—É–º–∏": "Sumy",
        "–Ü–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫": "Ivano-Frankivsk",
        "–¢–µ—Ä–Ω–æ–ø—ñ–ª—å": "Ternopil",
        "–ö—Ä–æ–ø–∏–≤–Ω–∏—Ü—å–∫–∏–π": "Kropyvnytskyi",
        "–£–∂–≥–æ—Ä–æ–¥": "Uzhhorod",
        "–õ—É—Ü—å–∫": "Lutsk",
        "–ú–µ–ª—ñ—Ç–æ–ø–æ–ª—å": "Melitopol",
        "–ö–∞–º'—è–Ω–µ—Ü—å-–ü–æ–¥—ñ–ª—å—Å—å–∫–∏–π": "Kamianets-Podilskyi",
        "–•–º–µ–ª—å–Ω–∏—Ü—å–∫–∏–π": "Khmelnytskyi",
        "–†—ñ–≤–Ω–µ": "Rivne",
        "–°–µ–≤–∞—Å—Ç–æ–ø–æ–ª—å": "Sevastopol",
        "–°—ñ–º—Ñ–µ—Ä–æ–ø–æ–ª—å": "Simferopol",
        "–ú–∞—Ä—ñ—É–ø–æ–ª—å": "Mariupol"
    }

    # –ó–∞–ø–∏—Ç –Ω–∞ —Å–∞–π—Ç openweathermap.org –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ—à–Ω—å–æ—é –ø–æ–≥–æ–¥—É
    # Request to openweathermap.org for today's weather
    def weather_request(self, city):
        weather_req = requests.get(
            f"https://api.openweathermap.org/data/2.5/weather?q={city}&appid={API_KEY_WT}&units=metric")
        return weather_req

    # Request to openweathermap.org for tomorrow weather
    def tomorrow_weather_request(self, city):
        weather_req = requests.get(
            f"https://api.openweathermap.org/data/2.5/forecast?q={city}&appid={API_KEY_WT}&units=metric")
        return weather_req

    # –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É
    # Formatting the text
    def print_weather_on_screen(self, json_text):

        values = [
            f"<b> {json_text['main']['temp']} C¬∞    {self.translate_weather(json_text['weather'][0]['main'])}</b>",
            f"<b>{datetime.datetime.fromtimestamp(json_text['sys']['sunrise']).strftime('%H:%M')}</b>   \n–ó–∞—Ö—ñ–¥ —Å–æ–Ω—Ü—è:       <b>{datetime.datetime.fromtimestamp(json_text['sys']['sunset']).strftime('%H:%M')}</b>",
            f"<b>{self.convert_to_wind_direction(json_text['wind']['deg'])}</b>  \n–®–≤—ñ–¥–∫—ñ—Å—Ç—å –≤—ñ—Ç—Ä—É:         <b>{json_text['wind']['speed']} –º/c</b>",
            f"<b>{round(json_text['main']['pressure']* 0.7500637555419211, 2)} –º–º.—Ä—Ç.—Å—Ç</b>"
        ]

        titles = [
            "–ü–æ–≥–æ–¥–∞:",
            "–°—Ö—ñ–¥ —Å–æ–Ω—Ü—è:",
            "–ù–∞–ø—Ä—è–º–æ–∫ –≤—ñ—Ç—Ä—É:",
            "–ü–æ–≤—ñ—Ç—Ä—è–Ω–∏–π —Ç–∏—Å–∫:"
        ]
        answer_string = dict(zip(titles, values))

        return answer_string

    # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –Ω–∞–ø—Ä—è–º –≤—ñ—Ç—Ä—É
    # Convert the wind direction

    def convert_to_wind_direction(self, degrees):

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —â–æ–± –∫—É—Ç –±—É–≤ —É –¥—ñ–∞–ø–∞–∑–æ–Ω—ñ [0, 360)
        degrees = degrees % 360

        # –ü–æ—à—É–∫ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ–≥–æ –Ω–∞–ø—Ä—è–º–∫—É
        for direction, (start, end) in self.wind_directions.items():
            if start <= degrees < end:
                return direction

        # –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π –Ω–∞–ø—Ä—è–º–æ–∫
        return '–ü–æ–º–∏–ª–∫–∞'

    # –ü–µ—Ä–µ–∫–ª–∞–¥–∞—î–º–æ –ø–æ–≥–æ–¥—É –∑ –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—ó
    # Translate weather from English
    def translate_weather(self, weather):

        for eng, ukr in self.weather_dict.items():
            if eng == weather:
                return ukr
        return '–ü–æ–º–∏–ª–∫–∞'

    def output_json(self):
        today_weather_req = self.weather_request(self.cities_dict[self.city])
        json_text = today_weather_req.json()
        return self.print_weather_on_screen(json_text)

    def output_json_tomorrow(self):
        tomorrow_weather_req = self.tomorrow_weather_request(
            self.cities_dict[self.city])
        json_text = tomorrow_weather_req.json()
        return self.print_tomorrow_weather(json_text)

    # –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
    # Formatting text for tomorrow's weather forecast

    def print_tomorrow_weather(self, json_text):
        values = [
            f"           {json_text['list'][self.tommorow_list_index()]['main']['temp_max']} C¬∞   {self.translate_weather(json_text['list'][self.tommorow_list_index()]['weather'][0]['main'])} \n\n",
        ]

        titles = [
            f"<b>{(datetime.datetime.now()+ datetime.timedelta(days=1)).strftime('%d.%m.%Y')}</b>\n\n",

        ]
        answer_string = dict(zip(titles, values))

        return answer_string

    # –í–∏—Ä–∞—Ö–æ–≤—É—î–º–æ —è–∫–∏–π —ñ–Ω–¥–µ–∫—Å —Ç—Ä–µ–±–∞ –≤–∫–∞–∑–∞—Ç–∏ –≤ –∑–∞–ø–∏—Ç—ñ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—ñ—ó –ø—Ä–æ –ø–æ–≥–æ–¥—É –Ω–∞ –∑–∞–≤—Ç—Ä–∞
    # Calculate which zip code should be specified in the request to receive information about the weather for tomorrow

    def tommorow_list_index(self):
        # –≥–æ–¥–∏–Ω–∞ —É —è—á–∫—É –±—É–ª–æ –∑—Ä–æ–±–ª–µ–Ω–æ –∑–∞–ø–∏—Ç
        hour_now = int(datetime.datetime.now().strftime("%H"))
        hour_list = [x for x in range(24)]
        index_list = [12, 12, 12, 1, 11, 11, 10, 10, 10,
                      9, 9, 9, 8, 8, 8, 7, 7, 7, 6, 6, 6, 5, 5, 5]
        index_dict = dict(zip(hour_list, index_list))
        return index_dict[hour_now]
